{
  "compilerOptions": {

    /* 基本选项 */
    "target": "es5",                          // 指定 ECMAScript 目标版本: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', or 'ESNEXT'
    "module": "commonjs",                     // 指定使用模块: 'commonjs', 'amd', 'system', 'umd' or 'es2015'
    "lib": ["dom", "esnext"],                 // 指定要包含在编译中的库文件
    "noLib": false,                           // 不包含默认的库文件
    "allowJs": true,                          // 允许编译 javascript 文件
    "checkJs": true,                          // 报告 javascript 文件中的错误
    "jsx": "react",                           // 指定 jsx 代码的生成: 'preserve', 'react-native', or 'react'
    "declaration": true,                      // 生成相应的 '.d.ts' 文件
    // "declarationDir": "",                  // 声称生命文件的输出路径
    // "sourceMap": true,                     // 生成相应的 '.map' 文件
    // "outFile": "./",                       // 将输出文件合并为一个文件
    "outDir": "./",                           // 指定输出目录
    "rootDir": "./",                          // 用来控制输出目录结构 --outDir.
    "removeComments": true,                   // 删除编译后的所有的注释
    "noEmit": true,                           // 不生成输出文件
    "noEmitOnError": true,                    // 报错时不生成输出文件
    "noErrorTruncation": true,                // 不截短错误消息
    "emitBOM": false,                         // 在输出文件的开头加入BOM投(UTF-8Byte Order Mark),
    "emitDeclarationOnly": false,             // 仅输出“d.ts”文件
    "noEmitHelpers": false,                   // 不在输出文件中生成用户自定义的帮助函数代码，如 __extends
    "importHelpers": true,                    // 从 tslib 导入辅助工具函数
    "isolatedModules": false,                 // 将每个文件做为单独的模块 （与 'ts.transpileModule' 类似）.
    "charset": "",                            // 输入文件的字符集
    "diagnostics": true,                      // 显示诊断信息
    "extendedDiagnostics": true,              // 显示详细的诊段信息
    "incremental": true,                      // 通过从先前编译中读取/写入磁盘上的文件来启用增量编译。该文件由--tsBuildInfoFile标志控制
    "listEmittedFiles": true,                 // 打印编译的部分生成文件的名称
    "listFiles": true,                        // 打印编辑部分文件的名称
    "locale": "zh-CN",                        // 用于显示错误消息的语言环境
    "preserveSymlinks": false,                // 不把符号链接解析为其真实路径；将符号链接文件视为真正的文件
    "preserveWatchOutput": false,             // 保留watch模式下过时的控制台输出
    "pretty": true,                           // Stylize errors and messages using color and context
    "reactNamespace": "React",                // 当目标为生成 "react" JSX时，指定 createElement和 __spread的调用对象
    "traceResolution": true,                  // 生成模块解析日志信息
    "tsBuildInfoFile": ".tsbuildinfo",        // Specify what file to store incremental build information in.

    /* 严格的类型检查选项 */
    "strict": true,                           // 启用所有严格类型检查选项
    "strictBindCallApply": true,              // Enable stricter checking of the bind, call, and apply methods on functions
    "strictFunctionTypes": true,              // 禁用函数参数双向协变检查
    "strictPropertyInitialization": true,     // 确保类的非undefined属性已经在构造函数里初始化。若要令此选项生效，需要同时启用--strictNullChecks
    "strictNullChecks": true,                 // In strict null checking mode, the null and undefined values are not in the domain of every type and are only assignable to themselves and any (the one exception being that undefined is also assignable to void).
    "noImplicitAny": true,                    // 在表达式和声明上有隐含的 any类型时报错
    "noImplicitThis": true,                   // 当 this 表达式值为 any 类型的时候，生成一个错误
    "alwaysStrict": true,                     // 以严格模式检查每个模块，并在每个文件里加入 'use strict'
    "noStrictGenericChecks": false,           // 禁用在函数类型里对泛型签名进行严格检查

    /* 额外的检查 */
    "noUnusedLocals": true,                   // 有未使用的变量时，抛出错误
    "noUnusedParameters": true,               // 有未使用的参数时，抛出错误
    "noImplicitReturns": true,                // 并不是所有函数里的代码都有返回值时，抛出错误
    "noFallthroughCasesInSwitch": true,       // 报告 switch 语句的 fallthrough 错误。（即，不允许 switch 的 case 语句贯穿）
    "noImplicitUseStrict": false,             // 模块输出中不包含 "use strict"指令
    "allowUnreachableCode": false,            // 不报告执行不到的代码
    "allowUnusedLabels": false,               // 不报告未使用的标签错误    
    "suppressExcessPropertyErrors": false,    // 阻止对对象字面量的额外属性检查
    "suppressImplicitAnyIndexErrors": false,  // 阻止 --noImplicitAny对缺少索引签名的索引对象报错
    "skipDefaultLibCheck": false,             // 忽略 库的默认声明文件的类型检查
    "skipLibCheck": false,                    // 忽略所有的声明文件（ *.d.ts）的类型检查

    /* 模块解析选项 */
    "moduleResolution": "node",               // 选择模块解析策略： 'node' (Node.js) or 'classic' (TypeScript pre-1.6)
    "noResolve": false,                       // 不把 /// <reference``>或模块导入的文件加到编译文件列表
    "baseUrl": "./",                          // 用于解析非相对模块名称的基目录
    "paths": {},                              // 模块名到基于 baseUrl 的路径映射的列表
    "rootDirs": [],                           // 根文件夹列表，其组合内容表示项目运行时的结构内容
    "typeRoots": [],                          // 包含类型声明的文件列表
    "types": [],                              // 需要包含的类型声明文件名列表
    "allowSyntheticDefaultImports": true,     // 允许从没有设置默认导出的模块中默认导入。
    "allowUmdGlobalAccess": true,             // 允许从模块访问UMD全局变量
    "composite": false,                       // 确保TypeScript可以确定在哪里查找引用项目的输出以编译项目
    "esModuleInterop": true,                  // 发布__importStar和生成器__importDefault兼容性，用于运行时babel生态系统兼容性，并支持--allowSyntheticDefaultImports类型系统兼容性
    "forceConsistentCasingInFileNames": true, // 禁止对同一文件的不一致引用
    "maxNodeModuleJsDepth": 0,                // node_modules依赖的最大搜索深度并加载JavaScript文件。仅适用于 --allowJs
    "resolveJsonModule": true,                // Include modules imported with .json extension

    /* Source Map Options */
    // "sourceRoot": "./",                    // 指定调试器应该找到 TypeScript 文件而不是源文件的位置
    // "mapRoot": "./",                       // 指定调试器应该找到映射文件而不是生成文件的位置
    // "inlineSourceMap": true,               // 生成单个 soucemaps 文件，而不是将 sourcemaps 生成不同的文件
    // "inlineSources": true,                 // 将代码与 sourcemaps 生成到一个文件中，要求同时设置了 --inlineSourceMap 或 --sourceMap 属性
    // "declarationMap": false,               // 为每个对应的“d.ts”文件生成 source map

    /* 其他选项 */
    "preserveConstEnums": true,               // 保留 const和 enum声明
    "experimentalDecorators": true,           // 启用装饰器
    "emitDecoratorMetadata": true,            // 为装饰器提供元数据的支持
    "downlevelIteration": true                // for..of在针对ES5或ES3时,为迭代、结构提供全面的支持
  },
  "include": [
    "*/**/*.ts"
  ]
}